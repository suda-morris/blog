(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{559:function(v,_,i){"use strict";i.r(_);var l=i(12),t=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("title: Coetex-M0 Introduction\ntags:")]),v._v(" "),_("ul",[_("li",[v._v("ARM\ncategories:")]),v._v(" "),_("li",[v._v("Geek Hobbies\nauthor: suda-morris\ndate: 2015-10-06 12:23:50 +0800")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"arm体系变种"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arm体系变种"}},[v._v("#")]),v._v(" ARM体系变种")]),v._v(" "),_("ol",[_("li",[v._v("M变种：\n"),_("ol",[_("li",[v._v("长乘法操作：32位整数乘以32位整数，生成64位整数")]),v._v(" "),_("li",[v._v("长乘加操作：32位整数乘以32位整数，加上32位整数，生成64位整数")])])]),v._v(" "),_("li",[v._v("T变种：\n"),_("ol",[_("li",[v._v("Thumb指令集是ARM指令集的一个子集重新编码而成的，它使ARM更加高效地进行运作")])])]),v._v(" "),_("li",[v._v("E变种：\n"),_("ol",[_("li",[v._v("增加了新的16位数据乘法与乘加操作指令")]),v._v(" "),_("li",[v._v("实现饱和的带符号数的加减法操作指令")]),v._v(" "),_("li",[v._v("进行双字数据操作的指令，包含LDRD、STDR、MCRR\\MRRC")]),v._v(" "),_("li",[v._v("cache预取指令PLD")])])]),v._v(" "),_("li",[v._v("J变种：\n"),_("ol",[_("li",[v._v("Jazelle技术：将Java代码运行速度提高了8倍，功耗降低了80%")])])]),v._v(" "),_("li",[v._v("SIMD变种：\n"),_("ol",[_("li",[v._v("可同时进行两个16位操作数或者4个8位操作数的运算")]),v._v(" "),_("li",[v._v("用户可以定义饱和运算模式")]),v._v(" "),_("li",[v._v("32位乘以32位的小数MAC")]),v._v(" "),_("li",[v._v("音频\\视频处理性能提高了4倍")]),v._v(" "),_("li",[v._v("提供小数算数运算")]),v._v(" "),_("li",[v._v("两套16位操作数的乘加\\乘减运算")])])])]),v._v(" "),_("h2",{attrs:{id:"arm处理器系列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arm处理器系列"}},[v._v("#")]),v._v(" ARM处理器系列")]),v._v(" "),_("ol",[_("li",[v._v("ARM7系列\n"),_("ol",[_("li",[v._v("小型、快速、低能耗、集成式的RISC芯片")]),v._v(" "),_("li",[v._v("冯诺依曼体系结构")]),v._v(" "),_("li",[v._v("三级流水线制")]),v._v(" "),_("li",[v._v("优秀的调试机制")])])]),v._v(" "),_("li",[v._v("ARM9、ARM9E系列\n"),_("ol",[_("li",[v._v("哈佛体系结构：这种体系结构是一种将程序指令存储和数据存储分开的存储器结构，是一种并行体系结构")]),v._v(" "),_("li",[v._v("支持32位的ARM指令和16位Thumb指令")]),v._v(" "),_("li",[v._v("支持一般的操作系统")]),v._v(" "),_("li",[v._v("五级流水处理及分离的Cache结构")]),v._v(" "),_("li",[v._v("ARM9E内核在ARM9内核的基础上增加了紧密耦合存储器的TCM及DSP部分")])])]),v._v(" "),_("li",[v._v("ARM10E系列\n"),_("ol",[_("li",[v._v("支持AMBA总线接口（包含AHB，ASB总线）")]),v._v(" "),_("li",[v._v("六级流水线制")]),v._v(" "),_("li",[v._v("包含DSP指令集")]),v._v(" "),_("li",[v._v("可选浮点协处理器")]),v._v(" "),_("li",[v._v("统一的数据cache和指令cache")]),v._v(" "),_("li",[v._v("能够支持多种商用操作系统")])])]),v._v(" "),_("li",[v._v("ARM11系列(ARM V6结构)\n"),_("ol",[_("li",[v._v("针对媒体处理的SIMD")]),v._v(" "),_("li",[v._v("用以提高安全性能的TrustZone技术")]),v._v(" "),_("li",[v._v("智能能源管理IEM")]),v._v(" "),_("li",[v._v("系统多处理技术")])])]),v._v(" "),_("li",[v._v("SecurCore系列\n"),_("ol",[_("li",[v._v("采用软内核技术")]),v._v(" "),_("li",[v._v("提供面前智能卡和低成本的存储保护单元")]),v._v(" "),_("li",[v._v("可集成用户自己的安全特性和其他处理器")]),v._v(" "),_("li",[v._v("极具安全性")])])]),v._v(" "),_("li",[v._v("Cortex系列处理器\n"),_("ol",[_("li",[v._v("ARM公司在经典处理器ARM11以后的产品改用Cortex命名，并分成A、R和M三类，旨在为各种不同的市场提供服务")]),v._v(" "),_("li",[v._v("A系列面向尖端的基于虚拟内存的操作系统和用户应用")]),v._v(" "),_("li",[v._v("R系列针对实时系统")]),v._v(" "),_("li",[v._v("M系列针对成本和功耗敏感的MCU和终端应用")])])])]),v._v(" "),_("h2",{attrs:{id:"cortex-m0-m0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cortex-m0-m0"}},[v._v("#")]),v._v(" Cortex-M0/M0+")]),v._v(" "),_("ol",[_("li",[v._v("CortexM0/M0+均是ARMv6M架构,均支持Thumb指令集，支持NVIC和WIC，但不支持Thumb2指令集，其中M0是三级流水线架构，M0+是二级流水线架构")]),v._v(" "),_("li",[v._v("CortexM3，CortexM4均是ARMv7M架构，均支持Thumb，Thumb2指令集，支持NVIC和WIC；CortexA5，CortexA8，CortexA9均是ARMv7A架构")]),v._v(" "),_("li",[v._v("存储器模型："),_("img",{attrs:{src:"http://i.imgur.com/KKgz65f.png",alt:"ARM CortexM存储器模型"}}),v._v(" "),_("ol",[_("li",[v._v("4GB可寻址线性空间")]),v._v(" "),_("li",[v._v("标准实现，适用于所有Cortex-M系列")]),v._v(" "),_("li",[v._v("无须paging和banking")]),v._v(" "),_("li",[v._v("软件访问可访问性")])])]),v._v(" "),_("li",[v._v("两种工作模式\n"),_("ol",[_("li",[v._v("Thread模式")]),v._v(" "),_("li",[v._v("Handler模式")])])]),v._v(" "),_("li",[v._v("异常模型\n"),_("ol",[_("li",[v._v("异常发生->加载向量列表->异常处理->返回")])])])]),v._v(" "),_("h2",{attrs:{id:"arm-cortex-m0-寄存器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arm-cortex-m0-寄存器"}},[v._v("#")]),v._v(" ARM Cortex-M0+寄存器")]),v._v(" "),_("ol",[_("li",[v._v("32位位宽寄存器：\n"),_("ol",[_("li",[v._v("13个通用寄存器：\n"),_("ol",[_("li",[v._v("R0-R7（Low registers）")]),v._v(" "),_("li",[v._v("R8-R12(High registers)")])])]),v._v(" "),_("li",[v._v("3个特殊用处寄存器\n"),_("ol",[_("li",[v._v("SP-R13，初始值：0x00000000")]),v._v(" "),_("li",[v._v("LR-R14")]),v._v(" "),_("li",[v._v("PC-R15，初始值0x00000004,Bit[0]为1，表示当前为Thumb代码")])])]),v._v(" "),_("li",[v._v("特殊寄存器\n"),_("ol",[_("li",[v._v("PSR（Program Status Register）")]),v._v(" "),_("li",[v._v("PRIMASK（Interrupt mask register），仅有Bit[0],值为1表示关闭所有中断，只有NMI和硬件错误才能被响应，缺省值为0")]),v._v(" "),_("li",[v._v("CONTROL（control register），只有Bit[0]（定义权限级别，0表示特权级线程模式，1表示普通线程模式，所有的Handler模式都是特权级模式）和Bit[1]（选择当前使用哪个栈指针，0表示选择主栈指针MSP，1表示选择进程栈指针PSP）")])])])])]),v._v(" "),_("li",[v._v("寄存器使用方法\n"),_("ol",[_("li",[v._v("R0-R3：传递函数参数，返回函数结果，因此也称为a1-a4；也可用于程序内部保存临时变量")]),v._v(" "),_("li",[v._v("R4-R11：保存程序内部的变量值，因此又称为v1-v8，其中r9是个平台相关的寄存器，需要半导体厂商自己定义")]),v._v(" "),_("li",[v._v("R12-R15：专门用途寄存器，R12-IP")])])]),v._v(" "),_("li",[v._v("程序状态寄存器PSR\n"),_("ol",[_("li",[v._v("APSR(Application Program Status Register)，包括Negative，Zero，Carry和Overflow的标志位")]),v._v(" "),_("li",[v._v("IPSR(Interrupt Program Status Register)，包括Exception number(前6位)")]),v._v(" "),_("li",[v._v("EPSR(Execution Program Status Register)，包括Thumb code is executed的指示位")]),v._v(" "),_("li",[v._v("程序状态寄存器的访问指令：MSR和MRS")])])])]),v._v(" "),_("h2",{attrs:{id:"arm-cortex-m0-指令集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arm-cortex-m0-指令集"}},[v._v("#")]),v._v(" ARM Cortex-M0+指令集")]),v._v(" "),_("ol",[_("li",[v._v("每条Thumb指令有相同处理器模型所对应的32位ARM指令，比如可以将Thumb指令ADD Rd，#immed_8转换为ARM指令ADD Rd，Rd，#immed_8")]),v._v(" "),_("li",[v._v("Thumb的56条指令分类：\n"),_("ol",[_("li",[v._v("存储器访问指令\n"),_("ol",[_("li",[v._v("ADR:Generate PC-relative address")]),v._v(" "),_("li",[v._v("LDM:Load Multiple registers")]),v._v(" "),_("li",[v._v("LDR{type}:Load Register using immediate offset")]),v._v(" "),_("li",[v._v("LDR{type}:Load Register using register offset")]),v._v(" "),_("li",[v._v("LDR:Load Register from PC-relative address")]),v._v(" "),_("li",[v._v("POP:Pop register from stack")]),v._v(" "),_("li",[v._v("PUSH:Push registers onto stack")]),v._v(" "),_("li",[v._v("STM:Store Multiple registers")]),v._v(" "),_("li",[v._v("STR{type}:Store Register using immediate offset")]),v._v(" "),_("li",[v._v("STR{type}:Store Register using register offset")])])]),v._v(" "),_("li",[v._v("数据处理指令")]),v._v(" "),_("li",[v._v("分支和控制指令\n"),_("ol",[_("li",[v._v("B{cc}:Branch {conditionally},如果使用了条件执行，那么跳转范围在-256~254字节内；如果没有使用条件执行，那么跳转范围在±1M内")]),v._v(" "),_("li",[v._v("BL:Branch with Link,跳转范围±16MB")]),v._v(" "),_("li",[v._v("BLX:Branch indirect with Link")]),v._v(" "),_("li",[v._v("BX:Branch indirect")])])]),v._v(" "),_("li",[v._v("杂项指令\n"),_("ol",[_("li",[v._v("MRS:Move from special register to register")]),v._v(" "),_("li",[v._v("MSR:Move from register to special register")]),v._v(" "),_("li",[v._v("CPSID:Change Processor State,Disable Interrupts,C语言操作函数:void __disable_irq(void);")]),v._v(" "),_("li",[v._v("CPSIE:Change Processor State,Enable Interrupts,C语言操作函数：void __enable_irq(void);")]),v._v(" "),_("li",[v._v("WFE:Wait For Event,C语言操作函数：void __WFE(void);")]),v._v(" "),_("li",[v._v("WFI:Wait For Interrupt,C语言操作函数：void __WFI(void);")]),v._v(" "),_("li",[v._v("NOP:No Operation,C语言操作函数：void __NOP(void);")]),v._v(" "),_("li",[v._v("SVC:Supervisor Call")])])])])])]),v._v(" "),_("h2",{attrs:{id:"arm-cortex-m0-外设"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arm-cortex-m0-外设"}},[v._v("#")]),v._v(" ARM Cortex-M0+外设")]),v._v(" "),_("ol",[_("li",[v._v("外设的映射\n"),_("ol",[_("li",[v._v("Private Peripheral Bus（PPB）的映射(0xE0000000-0xE00FFFFF)")]),v._v(" "),_("li",[v._v("SysTick:24位计数器，扩展的NVIC特性")]),v._v(" "),_("li",[v._v("NVIC：中断设置与配置")]),v._v(" "),_("li",[v._v("SCB:提供系统实现和系统控制；包括配置、控制和上报系统异常")]),v._v(" "),_("li",[v._v("MPU（Memory Protection Unit）")])])]),v._v(" "),_("li",[v._v("NVIC接口API：\n"),_("ol",[_("li",[v._v("void NVIC_EnableIRQ(IRQn_t IRQn);")]),v._v(" "),_("li",[v._v("void NVIC_DisableIRQ(IRQn_t IRQn);")]),v._v(" "),_("li",[v._v("uint32_t NVIC_GetPendingIRQ(IRQn_t IRQn);")]),v._v(" "),_("li",[v._v("void NVIC_SetPendingIRQ(IRQn_t IRQn);")]),v._v(" "),_("li",[v._v("void NVIC_ClearPendingIRQ(IRQn_t IRQn);")]),v._v(" "),_("li",[v._v("void NVIC_SetPriority(IRQn_t IRQn,uint32_t priority);")]),v._v(" "),_("li",[v._v("uint32_t NVIC_GetPriority(IRQn_t IRQn);")]),v._v(" "),_("li",[v._v("void NVIC_SystemReset(void);请求一次系统复位")])])])]),v._v(" "),_("h2",{attrs:{id:"arm-cortex-m0-可执行镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arm-cortex-m0-可执行镜像"}},[v._v("#")]),v._v(" ARM Cortex-M0+可执行镜像")]),v._v(" "),_("ol",[_("li",[v._v("ELF：定义了对象文件的内容和格式")]),v._v(" "),_("li",[v._v("BIN：直接的内存镜像")]),v._v(" "),_("li",[v._v("HEX：包含了目标程序镜像的存储地址")]),v._v(" "),_("li",[v._v("AXF：ARM工具链产生，BIN文件内容+调试信息")])]),v._v(" "),_("h2",{attrs:{id:"weak和alias属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#weak和alias属性"}},[v._v("#")]),v._v(" WEAK和alias属性")]),v._v(" "),_("ol",[_("li",[v._v("当两个或者两个以上行数具有相同的名字，并其中之一声明为weak属性时，则不会引发重定义错误。连接器会忽略弱属性的函数，而使用普通的函数来解析所有对这些符号的引用")]),v._v(" "),_("li",[v._v("如果普通的函数不可用时，连接器会使用weak属性的函数")]),v._v(" "),_("li",[v._v("alias属性：声明别名，当weak和alias属性连用时，可以声明弱别")])]),v._v(" "),_("h2",{attrs:{id:"错误异常"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#错误异常"}},[v._v("#")]),v._v(" 错误异常")]),v._v(" "),_("ol",[_("li",[v._v("优先级仅次于复位和NMI")]),v._v(" "),_("li",[v._v("引起错误异常的来源：\n"),_("ol",[_("li",[v._v("Memory访问异常")]),v._v(" "),_("li",[v._v("程序异常")])])]),v._v(" "),_("li",[v._v("错误异常分析："),_("img",{attrs:{src:"http://i.imgur.com/DrQtd2F.png",alt:"错误异常分析"}}),v._v(" "),_("ol",[_("li",[v._v("当异常发生时，处理器首先会保护现场，因此可以得到当前寄存器的值，以及异常发生前被压栈的寄存器的值")]),v._v(" "),_("li",[v._v("判断PC的返回值是否合法，存储器的访问地址是否正确，栈地址是否正确以及是否出现了溢出")]),v._v(" "),_("li",[v._v("访问PSR寄存器来获取当前处理器的状态信息")])])])]),v._v(" "),_("h2",{attrs:{id:"锁定"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁定"}},[v._v("#")]),v._v(" 锁定")]),v._v(" "),_("ol",[_("li",[v._v("锁定（Lockup）的发生：\n"),_("ol",[_("li",[v._v("在处理NMI或者HardFault时产生错误异常")]),v._v(" "),_("li",[v._v("异常处理返回，当PSP出栈时，系统总线错误")])])]),v._v(" "),_("li",[v._v("锁定的退出：\n"),_("ol",[_("li",[v._v("复位")]),v._v(" "),_("li",[v._v("Debugger")])])]),v._v(" "),_("li",[v._v("锁定的预防：\n"),_("ol",[_("li",[v._v("尽量缩短NMI和HardFault异常的处理时间")]),v._v(" "),_("li",[v._v("在进入HardFault异常处理前，添加汇编代码，检查SP指针")])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);