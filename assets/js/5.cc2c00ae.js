(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{367:function(t,s,a){t.exports=a.p+"assets/img/regular_expression_functioning.54a18454.png"},368:function(t,s,a){t.exports=a.p+"assets/img/regex_meta_char.115b1f6c.png"},369:function(t,s,a){t.exports=a.p+"assets/img/regex_modes.ee5d9a37.png"},370:function(t,s,a){t.exports=a.p+"assets/img/regex_greedy_example_result.b0c582cb.png"},371:function(t,s,a){t.exports=a.p+"assets/img/regex_greedy_example.63e5c750.jpg"},372:function(t,s,a){t.exports=a.p+"assets/img/regex_lazy_example_result.10e40baa.png"},373:function(t,s,a){t.exports=a.p+"assets/img/regex_greedy_lazy_compare.40c03d7a.png"},374:function(t,s,a){t.exports=a.p+"assets/img/regex_group.43e12b6a.png"},375:function(t,s,a){t.exports=a.p+"assets/img/regex_subgroup.4b14f91e.png"},376:function(t,s,a){t.exports=a.p+"assets/img/regex_subgroup_index.083b6a8a.png"},377:function(t,s,a){t.exports=a.p+"assets/img/regex_search_double_word.3951b939.png"},378:function(t,s,a){t.exports=a.p+"assets/img/regex_match_mode.e53ccf35.png"},379:function(t,s,a){t.exports=a.p+"assets/img/regex_case_insensitive_01.eeb074ed.png"},380:function(t,s,a){t.exports=a.p+"assets/img/regex_case_insensitive_02.b630d137.png"},381:function(t,s,a){t.exports=a.p+"assets/img/regex_dot_all.59b4b56c.png"},382:function(t,s,a){t.exports=a.p+"assets/img/regex_start_end.09cbdacb.png"},383:function(t,s,a){t.exports=a.p+"assets/img/regex_multiline.e3bf8bd8.png"},384:function(t,s,a){t.exports=a.p+"assets/img/regex_assertion.a1961b74.png"},385:function(t,s,a){t.exports=a.p+"assets/img/regex_look_around.3cc80c66.png"},386:function(t,s,a){t.exports=a.p+"assets/img/regex_escape.da9fb39c.png"},387:function(t,s,a){t.exports=a.p+"assets/img/regex_flavour.47bced97.png"},388:function(t,s,a){t.exports=a.p+"assets/img/regex_posix_charset.c3202495.png"},389:function(t,s,a){t.exports=a.p+"assets/img/regex_posix_vs_pcre.ebfd6525.png"},390:function(t,s,a){t.exports=a.p+"assets/img/regex_linux_grep.a3bbeb6a.png"},391:function(t,s,a){t.exports=a.p+"assets/img/regex_unicode.c2e209e0.png"},392:function(t,s,a){t.exports=a.p+"assets/img/regex_unicode_property.2ad1c343.jpg"},393:function(t,s,a){t.exports=a.p+"assets/img/regex_ide_support.91329d89.jpg"},539:function(t,s,a){"use strict";a.r(s);var n=a(12),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("p",[s("img",{attrs:{src:a(367),alt:"正则表达式的功能"}})]),t._v(" "),s("h2",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),s("p",[s("img",{attrs:{src:a(368),alt:"元字符"}})]),t._v(" "),s("h2",{attrs:{id:"量词与贪婪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词与贪婪"}},[t._v("#")]),t._v(" 量词与贪婪")]),t._v(" "),s("p",[s("img",{attrs:{src:a(369),alt:"各种匹配模式"}})]),t._v(" "),s("h3",{attrs:{id:"贪婪模式-greedy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式-greedy"}},[t._v("#")]),t._v(" 贪婪模式（Greedy）")]),t._v(" "),s("p",[t._v("正则中，表示次数的量词默认是贪婪的，在贪婪模式下，会尝试尽可能最大长度去匹配。")]),t._v(" "),s("p",[t._v("在字符串"),s("code",[t._v("aaabb")]),t._v("中使用正则"),s("code",[t._v("a*")]),t._v("的匹配过程：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(370),alt:"贪婪模式示例"}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(371),alt:"贪婪模式解析"}})]),t._v(" "),s("h3",{attrs:{id:"非贪婪模式-lazy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪模式-lazy"}},[t._v("#")]),t._v(" 非贪婪模式（Lazy）")]),t._v(" "),s("p",[t._v("非贪婪模式下，正则会找出长度最小且满足要求的结果。将贪婪模式变成非贪婪模式的方法是："),s("strong",[t._v("在量词后面加上"),s("code",[t._v("?")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(372),alt:"非贪婪模式示例"}})]),t._v(" "),s("h3",{attrs:{id:"贪婪和非贪婪的对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪和非贪婪的对比"}},[t._v("#")]),t._v(" 贪婪和非贪婪的对比")]),t._v(" "),s("p",[s("img",{attrs:{src:a(373),alt:"贪婪模式与非贪婪模式的对比"}})]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'a*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaabb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 贪婪模式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'a*?'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaabb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 非贪婪模式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"分组与引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组与引用"}},[t._v("#")]),t._v(" 分组与引用")]),t._v(" "),s("p",[s("img",{attrs:{src:a(374),alt:"正则分组"}})]),t._v(" "),s("p",[t._v("括号在正则中可以用于分组，被括号括起来的部分“子表达式”会被保存成一个子组，简单来说，第几个括号就是第几个分组。")]),t._v(" "),s("p",[t._v("如果正则中出现了括号，那么就会认为，这个子表达式在后续可能会再次被引用，如果我们不打算去引用，建议将其声明为"),s("strong",[t._v("不保存")]),t._v("子组，以提高正则的性能。实现方法是，在括号里面使用"),s("code",[t._v("?:")]),t._v("进行声明。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("正则")]),t._v(" "),s("th",[t._v("示例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("保存子组")]),t._v(" "),s("td",[t._v("(正则)")]),t._v(" "),s("td",[t._v("\\d{15}(\\d{3})?")])]),t._v(" "),s("tr",[s("td",[t._v("不保存子组")]),t._v(" "),s("td",[t._v("(?:正则)")]),t._v(" "),s("td",[t._v("\\d{15}(?:\\d{3})?")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(375),alt:"分组"}})]),t._v(" "),s("h3",{attrs:{id:"分组的编号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组的编号"}},[t._v("#")]),t._v(" 分组的编号")]),t._v(" "),s("p",[t._v("如果要看某个括号里面的内容是第一个分组，该怎么办？我们只需要数左括号（开括号）是第几个，就可以确定是第几个子组。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(376),alt:"分组编号"}})]),t._v(" "),s("h3",{attrs:{id:"命名分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名分组"}},[t._v("#")]),t._v(" 命名分组")]),t._v(" "),s("p",[t._v("有些语言提供了命名分组，这比数字更有辨识度，不容易出错。格式为："),s("code",[t._v("(?P<group-name>regular-expression)")])]),t._v(" "),s("h3",{attrs:{id:"分组引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组引用"}},[t._v("#")]),t._v(" 分组引用")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("编程语言")]),t._v(" "),s("th",[t._v("查找时引用方式")]),t._v(" "),s("th",[t._v("替换时引用方式")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Python")]),t._v(" "),s("td",[t._v("\\number")]),t._v(" "),s("td",[t._v("\\number")])]),t._v(" "),s("tr",[s("td",[t._v("Java")]),t._v(" "),s("td",[t._v("\\number")]),t._v(" "),s("td",[t._v("$number")])]),t._v(" "),s("tr",[s("td",[t._v("JavaScript")]),t._v(" "),s("td",[t._v("\\number")]),t._v(" "),s("td",[t._v("$number")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(377),alt:"正则表达式查找重复单词"}})]),t._v(" "),s("h2",{attrs:{id:"匹配模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配模式"}},[t._v("#")]),t._v(" 匹配模式")]),t._v(" "),s("p",[t._v("匹配模式，指的是正则中一些"),s("strong",[t._v("改变元字符匹配行为")]),t._v("的方式。常见的匹配模式有 4 种：不区分大小写模式、点号通配模式、多行模式和注释模式。")]),t._v(" "),s("p",[t._v("具体做法是，将**模式修饰符 (? 模式标识)**放在整个正则前面。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(378),alt:"匹配模式"}})]),t._v(" "),s("h3",{attrs:{id:"不区分大小写模式-case-insensitive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不区分大小写模式-case-insensitive"}},[t._v("#")]),t._v(" 不区分大小写模式（Case-Insensitive）")]),t._v(" "),s("p",[s("img",{attrs:{src:a(379),alt:"正则表达式不区分大小写模式"}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(380),alt:"正则表达式不区分大小写模式"}})]),t._v(" "),s("p",[t._v("Python 代码中如何使用不区分大小写的匹配模式")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('r"cat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CAT Cat cat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IGNORECASE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CAT'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cat'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"点号通配模式-dot-all"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点号通配模式-dot-all"}},[t._v("#")]),t._v(" 点号通配模式（Dot All）")]),t._v(" "),s("p",[t._v("正则中提供了一种模式，让英文的点（.）可以匹配上包括换行的任何字符。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(381),alt:"正则表达式点号通配模式"}})]),t._v(" "),s("h3",{attrs:{id:"多行匹配模式-multiline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多行匹配模式-multiline"}},[t._v("#")]),t._v(" 多行匹配模式（Multiline）")]),t._v(" "),s("p",[t._v("通常情况下，^匹配整个字符串的开头，$ 匹配整个字符串的结尾。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(382),alt:"正则表达式开始和结尾"}})]),t._v(" "),s("p",[t._v("多行模式的作用在于，使  ^ 和 $ 能匹配上每行的开头或结尾。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(383),alt:"正则表达式多行模式"}})]),t._v(" "),s("p",[t._v("正则中还有 "),s("code",[t._v("\\A")]),t._v(" 和 "),s("code",[t._v("\\z")]),t._v("（Python 中是 "),s("code",[t._v("\\Z")]),t._v("） 这两个元字符容易混淆，"),s("code",[t._v("\\A")]),t._v(" 仅匹配整个字符串的开始，"),s("code",[t._v("\\z")]),t._v(" 仅匹配整个字符串的结束，在多行匹配模式下，它们的匹配行为不会改变，如果只想匹配整个字符串，而不是匹配每一行，用这个更严谨一些。")]),t._v(" "),s("h3",{attrs:{id:"注释模式-comment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释模式-comment"}},[t._v("#")]),t._v(" 注释模式（Comment）")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("?"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#word) \\1(?#word repeat again)")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\nregex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("r'''(?mx)  # 使用多行模式和x模式\n^          # 开头\n(\\d{4})    # 年\n(\\d{2})    # 月\n$          # 结尾\n'''")]),t._v("\n\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'202006\\n202007'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出结果 [('2020', '06'), ('2020', '07')]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),s("p",[t._v("断言是指对匹配到的文本位置有要求，常见的断言有三种：单词边界、行的开始或结束以及环视。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(384),alt:"断言"}})]),t._v(" "),s("h3",{attrs:{id:"单词边界-word-boundary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单词边界-word-boundary"}},[t._v("#")]),t._v(" 单词边界（Word Boundary）")]),t._v(" "),s("p",[t._v("正则中使用 "),s("code",[t._v("\\b")]),t._v(" 来表示单词的边界。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("tom"),s("br"),t._v("单词包含tom")]),t._v(" "),s("th",[t._v("\\btom"),s("br"),t._v("以tom开头的单词")]),t._v(" "),s("th",[t._v("tom\\b"),s("br"),t._v("以tom结尾的单词")]),t._v(" "),s("th",[t._v("\\btom\\b"),s("br"),t._v("只能是tom")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tom")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✔️")])]),t._v(" "),s("tr",[s("td",[t._v("tomorrow")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✖️")]),t._v(" "),s("td",[t._v("✖️")])]),t._v(" "),s("tr",[s("td",[t._v("atom")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✖️")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✖️")])]),t._v(" "),s("tr",[s("td",[t._v("atomic")]),t._v(" "),s("td",[t._v("✔️")]),t._v(" "),s("td",[t._v("✖️")]),t._v(" "),s("td",[t._v("✖️")]),t._v(" "),s("td",[t._v("✖️")])])])]),t._v(" "),s("h3",{attrs:{id:"行的开始或结束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行的开始或结束"}},[t._v("#")]),t._v(" 行的开始或结束")]),t._v(" "),s("p",[t._v("在多行模式下，"),s("code",[t._v("^")]),t._v(" 和 "),s("code",[t._v("$")]),t._v(" 符号可以匹配每一行的开头或结尾。大部分实现默认不是多行匹配模式，但也有例外，比如 Ruby 中默认是多行模式。所以对于校验输入数据来说，一种更严谨的做法是，使用 "),s("code",[t._v("\\A")]),t._v(" 和 "),s("code",[t._v("\\z")]),t._v(" （Python 中使用 "),s("code",[t._v("\\Z")]),t._v("）  来匹配整个文本的开头或结尾。")]),t._v(" "),s("h3",{attrs:{id:"环视-look-around"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环视-look-around"}},[t._v("#")]),t._v(" 环视（Look Around）")]),t._v(" "),s("p",[t._v("环视就是要求匹配部分的前面或后面要满足（或不满足）某种规则，有些地方也称环视为"),s("strong",[t._v("零宽断言")]),t._v("。")]),t._v(" "),s("p",[t._v("环视中虽然也有括号，但不会保存成子组。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("正则")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("含义")]),t._v(" "),s("th",[t._v("示例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("(?<=Y)")]),t._v(" "),s("td",[t._v("肯定逆序环视"),s("br"),t._v("positive-lookbehind")]),t._v(" "),s("td",[t._v("左边是Y")]),t._v(" "),s("td",[t._v("(?<=\\d)th 左边是数字的 th,能匹配 9th")])]),t._v(" "),s("tr",[s("td",[t._v("(?<!Y)")]),t._v(" "),s("td",[t._v("否定逆序环视"),s("br"),t._v("negative-lookbehind")]),t._v(" "),s("td",[t._v("左边不是Y")]),t._v(" "),s("td",[t._v("(?<!\\d)th 左边不是数字的 th,能匹配 health")])]),t._v(" "),s("tr",[s("td",[t._v("(?=Y)")]),t._v(" "),s("td",[t._v("肯定顺序环视"),s("br"),t._v("positive-lookahead")]),t._v(" "),s("td",[t._v("右边是Y")]),t._v(" "),s("td",[t._v("six(?=\\d) 右边是数字的 six,能匹配 six6")])]),t._v(" "),s("tr",[s("td",[t._v("(?!Y)")]),t._v(" "),s("td",[t._v("否定顺序环视"),s("br"),t._v("negative-lookahead")]),t._v(" "),s("td",[t._v("右边不是Y")]),t._v(" "),s("td",[t._v("hi(?!\\d) 右边不是数字的 hi,能匹配 high")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(385),alt:"环视"}})]),t._v(" "),s("h2",{attrs:{id:"转义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转义"}},[t._v("#")]),t._v(" 转义")]),t._v(" "),s("p",[s("img",{attrs:{src:a(386),alt:"转义"}})]),t._v(" "),s("p",[t._v("正则中转义有些情况下会比较复杂，从录入的字符串文本，到最终的正则表达式，经过了"),s("strong",[t._v("字符串转义")]),t._v("和"),s("strong",[t._v("正则转义")]),t._v("两个步骤。")]),t._v(" "),s("p",[t._v("一般来说如果我们要想将元字符（.*+?() 之类）表示成它字面上本来的意思，是需要对其进行转义的，但如果它们出现在字符组中括号里，可以不转义。但如果在中括号中出现 \\d 或 \\w 等符号时，他们还是元字符本身的含义。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'[.*+?()]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[.*+?()]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单个长度的元字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'[\\d]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d12\\\\'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\w，\\d等在中括号中还是元字符的功能")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匹配上了数字，而不是反斜杠\\和字母d")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\n\\n\\\\'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到了换行符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\n\\n\\\\'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到了换行符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\n\\n\\\\'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到了换行符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\\\\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\n\\n\\\\'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到了反斜杠和字母n")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"流派"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流派"}},[t._v("#")]),t._v(" 流派")]),t._v(" "),s("p",[s("img",{attrs:{src:a(387),alt:"流派"}})]),t._v(" "),s("h3",{attrs:{id:"posix-字符组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#posix-字符组"}},[t._v("#")]),t._v(" POSIX 字符组")]),t._v(" "),s("p",[s("img",{attrs:{src:a(388),alt:"字符组"}})]),t._v(" "),s("h3",{attrs:{id:"posix-和-pcre-的主要用法区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#posix-和-pcre-的主要用法区别"}},[t._v("#")]),t._v(" POSIX 和 PCRE 的主要用法区别")]),t._v(" "),s("p",[s("img",{attrs:{src:a(389),alt:"posix_vs_pcre"}})]),t._v(" "),s("h3",{attrs:{id:"linux-工具中选择不同的正则流派"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-工具中选择不同的正则流派"}},[t._v("#")]),t._v(" Linux 工具中选择不同的正则流派")]),t._v(" "),s("p",[s("img",{attrs:{src:a(390),alt:"posix_vs_pcre"}})]),t._v(" "),s("h2",{attrs:{id:"处理-unicode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理-unicode"}},[t._v("#")]),t._v(" 处理 Unicode")]),t._v(" "),s("p",[s("img",{attrs:{src:a(391),alt:"unicode"}})]),t._v(" "),s("p",[t._v("Unicode  规定了字符对应的码值，这个码值得编码成字节的形式去传输和存储。最常见的编码方式是 "),s("code",[t._v("UTF-8")]),t._v("，另外还有 "),s("code",[t._v("UTF-16")]),t._v("，"),s("code",[t._v("UTF-32")]),t._v("  等。"),s("code",[t._v("UTF-8")]),t._v(" 之所以能够流行起来，是因为其编码比较巧妙，采用的是变长的方法。也就是一个 Unicode 字符，在使用 UTF-8  编码表示时占用 "),s("code",[t._v("1")]),t._v(" 到 "),s("code",[t._v("4")]),t._v(" 个字节不等。最重要的是 Unicode 兼容 ASCII 编码，在表示纯英文时，并不会占用更多存储空间。而汉字，在 UTF-8 中，通常是用"),s("code",[t._v("3")]),t._v("个字节来表示。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("u'正'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("b'\\xe6\\xad\\xa3'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("u'则'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("b'\\xe5\\x88\\x99'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"unicode-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unicode-属性"}},[t._v("#")]),t._v(" Unicode 属性")]),t._v(" "),s("p",[t._v("Unicode 属性把 Unicode 字符集划分成不同的字符小集合。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(392),alt:"属性"}})]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("➤ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"汉字123"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -P "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\p{Han}"')]),t._v("                                                                                   00:05:59\n汉字123\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"常见-ide-对正则表达式的支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见-ide-对正则表达式的支持"}},[t._v("#")]),t._v(" 常见 IDE 对正则表达式的支持")]),t._v(" "),s("p",[s("img",{attrs:{src:a(393),alt:"IDE支持情况"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);